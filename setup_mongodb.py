#!/usr/bin/env python3
"""
Script para configurar √≠ndices en MongoDB para la aplicaci√≥n de b√∫squeda sem√°ntica.

Este script crea los √≠ndices necesarios para optimizar las b√∫squedas:
- √çndice de texto para b√∫squedas de texto completo
- √çndice para embeddings vectoriales
- √çndices compuestos para consultas frecuentes

Uso:
    python setup_mongodb.py

Autor: B√∫squeda Sem√°ntica V2
"""
import os
from pymongo import MongoClient
from dotenv import load_dotenv
from pathlib import Path

def load_configuration():
    """Cargar configuraci√≥n desde archivo .env."""
    dotenv_path = Path(__file__).parent / "config" / ".env"
    load_dotenv(dotenv_path=dotenv_path)

    return {
        'mongodb_uri': os.getenv('MONGODB_URI', 'mongodb://localhost:27017/'),
        'database_name': os.getenv('MONGODB_DATABASE', 'album'),
        'collection_name': os.getenv('MONGODB_COLLECTION', 'imagenes_2')
    }

def create_text_index(collection):
    """Crear √≠ndice de texto para b√∫squedas de texto completo."""
    print("üìù Creando √≠ndice de texto...")

    try:
        # Crear √≠ndice de texto en campos relevantes
        text_index = collection.create_index([
            ('nombre', 'text'),
            ('descripcion_semantica', 'text'),
            ('objetos', 'text'),
            ('personas', 'text'),
            ('barrio', 'text'),
            ('calle', 'text'),
            ('ciudad', 'text'),
            ('pais', 'text')
        ])

        print(f"   ‚úÖ √çndice de texto creado: {text_index}")
        return True

    except Exception as e:
        print(f"   ‚ùå Error al crear √≠ndice de texto: {e}")
        return False

def create_embedding_index(collection):
    """Crear √≠ndice para b√∫squedas vectoriales."""
    print("üî¢ Creando √≠ndice para embeddings...")

    try:
        # Crear √≠ndice para el campo embedding
        embedding_index = collection.create_index('embedding')

        print(f"   ‚úÖ √çndice de embedding creado: {embedding_index}")
        return True

    except Exception as e:
        print(f"   ‚ùå Error al crear √≠ndice de embedding: {e}")
        return False

def create_compound_indexes(collection):
    """Crear √≠ndices compuestos para consultas frecuentes."""
    print("‚ö° Creando √≠ndices compuestos...")

    indexes_created = []

    try:
        # √çndice para consultas por ubicaci√≥n
        location_index = collection.create_index([
            ('ciudad', 1),
            ('barrio', 1),
            ('calle', 1)
        ])
        indexes_created.append(f"ubicaci√≥n: {location_index}")
        print(f"   ‚úÖ √çndice de ubicaci√≥n creado: {location_index}")

        # √çndice para consultas por fecha
        date_index = collection.create_index([
            ('fecha_creacion_anio', 1),
            ('fecha_creacion_mes', 1),
            ('fecha_creacion_dia', 1)
        ])
        indexes_created.append(f"fecha: {date_index}")
        print(f"   ‚úÖ √çndice de fecha creado: {date_index}")

        # √çndice para consultas por objetos
        objects_index = collection.create_index('objetos')
        indexes_created.append(f"objetos: {objects_index}")
        print(f"   ‚úÖ √çndice de objetos creado: {objects_index}")

        # √çndice para hash √∫nico
        hash_index = collection.create_index('id_hash', unique=True)
        indexes_created.append(f"hash √∫nico: {hash_index}")
        print(f"   ‚úÖ √çndice de hash √∫nico creado: {hash_index}")

        return indexes_created

    except Exception as e:
        print(f"   ‚ùå Error al crear √≠ndices compuestos: {e}")
        return indexes_created

def show_existing_indexes(collection):
    """Mostrar √≠ndices existentes en la colecci√≥n."""
    print("üìã √çndices existentes:")

    try:
        indexes = collection.list_indexes()
        for index in indexes:
            print(f"   - {index['name']}: {index['key']}")
    except Exception as e:
        print(f"   ‚ùå Error al listar √≠ndices: {e}")

def main():
    """Funci√≥n principal para configurar MongoDB."""
    print("üçÉ Configurando MongoDB para B√∫squeda Sem√°ntica V2")
    print("=" * 60)

    # Cargar configuraci√≥n
    config = load_configuration()
    print(f"üìç Conectando a: {config['database_name']}.{config['collection_name']}")

    try:
        # Conectar a MongoDB
        client = MongoClient(config['mongodb_uri'])
        db = client[config['database_name']]
        collection = db[config['collection_name']]

        # Verificar conexi√≥n
        client.admin.command('ping')
        print("   ‚úÖ Conexi√≥n exitosa a MongoDB")

        # Mostrar √≠ndices existentes
        show_existing_indexes(collection)
        print()

        # Crear √≠ndices
        text_created = create_text_index(collection)
        embedding_created = create_embedding_index(collection)
        compound_indexes = create_compound_indexes(collection)

        print("\n" + "=" * 60)
        print("üìä RESUMEN DE CONFIGURACI√ìN")
        print("=" * 60)

        print(f"‚úÖ √çndice de texto: {'Creado' if text_created else 'Error'}")
        print(f"‚úÖ √çndice de embedding: {'Creado' if embedding_created else 'Error'}")
        print(f"‚úÖ √çndices compuestos: {len(compound_indexes)} creados")

        if compound_indexes:
            for index in compound_indexes:
                print(f"   - {index}")

        print("\nüéâ ¬°Configuraci√≥n de MongoDB completada!")
        print("\nüí° Recomendaciones:")
        print("   - Los √≠ndices mejorar√°n el rendimiento de las b√∫squedas")
        print("   - El √≠ndice de texto permite b√∫squedas de texto completo")
        print("   - El √≠ndice de embedding optimiza las b√∫squedas sem√°nticas")
        print("   - Los √≠ndices compuestos aceleran consultas espec√≠ficas")

        client.close()

    except Exception as e:
        print(f"‚ùå Error al configurar MongoDB: {e}")
        print("\nüí° Soluciones posibles:")
        print("   - Verifica que MongoDB est√© ejecut√°ndose")
        print("   - Aseg√∫rate de tener permisos para crear √≠ndices")
        print("   - Verifica la configuraci√≥n de conexi√≥n en config/.env")
        return 1

    return 0

if __name__ == "__main__":
    exit(main())