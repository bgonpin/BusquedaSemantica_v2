#!/usr/bin/env python3
"""
Script de prueba para validar la funcionalidad de b√∫squeda sem√°ntica.
"""
import sys
import os
from pathlib import Path

# Agregar el directorio actual al path
sys.path.insert(0, str(Path(__file__).parent))

from src.busqueda_semantica import BuscadorSemantico
from src.database import DatabaseManager
from src.qdrant_manager import QdrantManager
from src.models import ConsultaBusqueda

def probar_conexion_ollama():
    """Probar conexi√≥n con Ollama."""
    print("üîç Probando conexi√≥n con Ollama...")

    try:
        from langchain_ollama import OllamaLLM, OllamaEmbeddings

        # Inicializar modelos
        ollama_base_url = os.getenv('OLLAMA_BASE_URL', 'http://localhost:11434')
        embedding_model = os.getenv('EMBEDDING_MODEL', 'embeddinggemma')
        ollama_model = os.getenv('OLLAMA_MODEL', 'qwen3:14b_40K')

        # Probar embeddings
        embeddings = OllamaEmbeddings(
            base_url=ollama_base_url,
            model=embedding_model
        )

        # Probar LLM
        llm = OllamaLLM(
            base_url=ollama_base_url,
            model=ollama_model,
            temperature=0.1
        )

        # Generar embedding de prueba
        test_embedding = embeddings.embed_query("prueba de conexi√≥n")
        print(f"‚úÖ Embeddings funcionando. Dimensi√≥n: {len(test_embedding)}")

        # Generar respuesta de prueba
        test_response = llm.invoke("Di 'Hola mundo' en espa√±ol")
        print(f"‚úÖ LLM funcionando. Respuesta: {test_response[:50]}...")

        return True

    except Exception as e:
        print(f"‚ùå Error con Ollama: {e}")
        return False

def probar_conexion_qdrant():
    """Probar conexi√≥n con Qdrant."""
    print("üîç Probando conexi√≥n con Qdrant...")

    try:
        qdrant_manager = QdrantManager()
        stats = qdrant_manager.obtener_estadisticas()
        print(f"‚úÖ Qdrant funcionando. Colecci√≥n: {stats['collection_name']}")
        print(f"   Vectores: {stats['total_vectors']}, Dimensi√≥n: {stats['vector_size']}")
        return True

    except Exception as e:
        print(f"‚ùå Error con Qdrant: {e}")
        return False

def probar_conexion_mongodb():
    """Probar conexi√≥n con MongoDB."""
    print("üîç Probando conexi√≥n con MongoDB...")

    try:
        db_manager = DatabaseManager()
        stats = db_manager.obtener_estadisticas()
        print(f"‚úÖ MongoDB funcionando. Base de datos: {db_manager.database_name if hasattr(db_manager, 'database_name') else 'album'}")
        print(f"   Documentos totales: {stats['total_documentos']}")
        print(f"   Documentos procesados: {stats['documentos_procesados']}")
        return True

    except Exception as e:
        print(f"‚ùå Error con MongoDB: {e}")
        return False

def probar_busqueda_semantica():
    """Probar b√∫squeda sem√°ntica con consultas de ejemplo."""
    print("üîç Probando b√∫squeda sem√°ntica...")

    try:
        # Inicializar gestores
        db_manager = DatabaseManager()
        qdrant_manager = QdrantManager()
        buscador = BuscadorSemantico(db_manager, qdrant_manager)

        # Consultas de prueba
        consultas_prueba = [
            "im√°genes de personas",
            "fotos de paisajes",
            "im√°genes con objetos tecnol√≥gicos",
            "fotos tomadas en la ciudad"
        ]

        for consulta_texto in consultas_prueba:
            print(f"\n   Probando consulta: '{consulta_texto}'")

            consulta = ConsultaBusqueda(
                query=consulta_texto,
                limite=5,
                umbral_similitud=0.7
            )

            try:
                resultados = buscador.buscar_semanticamente(consulta)

                if resultados:
                    print(f"   ‚úÖ Encontrados {len(resultados)} resultados")
                    for i, resultado in enumerate(resultados[:3]):  # Mostrar primeros 3
                        print(f"      {i+1}. {resultado.documento.nombre} (similitud: {resultado.similitud:.3f})")
                else:
                    print("   ‚ö†Ô∏è No se encontraron resultados")

            except Exception as e:
                print(f"   ‚ùå Error en b√∫squeda: {e}")

        return True

    except Exception as e:
        print(f"‚ùå Error al probar b√∫squeda sem√°ntica: {e}")
        return False

def main():
    """Funci√≥n principal de prueba."""
    print("üöÄ Iniciando pruebas de b√∫squeda sem√°ntica...\n")

    # Verificar conexiones
    ollama_ok = probar_conexion_ollama()
    qdrant_ok = probar_conexion_qdrant()
    mongodb_ok = probar_conexion_mongodb()

    print("\nüìä Resultado de conexiones:")
    print(f"   Ollama: {'‚úÖ' if ollama_ok else '‚ùå'}")
    print(f"   Qdrant: {'‚úÖ' if qdrant_ok else '‚ùå'}")
    print(f"   MongoDB: {'‚úÖ' if mongodb_ok else '‚ùå'}")

    if not all([ollama_ok, qdrant_ok, mongodb_ok]):
        print("\n‚ùå Algunas conexiones fallaron. Verifica que todos los servicios est√©n ejecut√°ndose.")
        return False

    # Probar b√∫squeda sem√°ntica
    print("\nüîç Probando funcionalidad de b√∫squeda sem√°ntica...")
    busqueda_ok = probar_busqueda_semantica()

    print("\nüìä Resultado final:")
    print(f"   B√∫squeda sem√°ntica: {'‚úÖ' if busqueda_ok else '‚ùå'}")

    if busqueda_ok:
        print("\nüéâ ¬°Todas las pruebas pasaron exitosamente!")
        print("   El sistema de b√∫squeda sem√°ntica est√° funcionando correctamente.")
        print("   Puedes usar la interfaz gr√°fica para realizar b√∫squedas.")
    else:
        print("\n‚ö†Ô∏è Algunas pruebas de b√∫squeda fallaron.")
        print("   Revisa los logs para m√°s detalles.")

    return busqueda_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)